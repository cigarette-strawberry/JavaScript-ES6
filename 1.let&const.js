// 1、 var 声明的变量   (污染全局变量)
let a = 1; // => 定义作用域
console.log(window.a); // => undefined

// 2、使用 var 会导致变量提升
console.log(a);
let a = 1;

// 3、 var 可以重复声明 let 解决了重复定义的问题
let a = 1;
let a = 2;
let a = 3;

// 4、作用域的问题
let a = 10;
{
  console.log(a); // => 暂时性死区
  let a = 20;
}

for (let i = 0; i < 5; i++) {
  setTimeout(() => {
    console.log(i); // => 0,1,2,3,4
  });
}
for (var i = 0; i < 5; i++) {
  setTimeout(() => {
    console.log(i); // => 5,5,5,5,5
  });
}

// const 常量 不会变的量 (地址不变即可)
const PI = { r: "3.14" };
PI.r = "3.15";
console.log(PI);

/* ----------------------------------------------------- */

// 全局作用域  私有作用域(函数作用域)
// 块级作用域

// 1.块级作用域让用let定义的变量成为当前作用域私有的；
// 2.在块级作用域中function定义的函数，块级作用域外面只声明，不定义；当进入到块级作用域中，先对函数进行定义

// 大括号都是块级作用域  除了对象

/* ----------------------------------------------------- */

// 字符串
// 模板字符串:让字符串的拼接更加直观
let str = `<div></div>`;

// repeat:   repeat方法返回一个新字符串，表示将原字符串重复n次。
console.log("x".repeat(2));
